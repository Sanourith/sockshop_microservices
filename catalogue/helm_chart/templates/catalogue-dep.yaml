---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  namespace: {{ .Values.namespace }}
  labels:
    name: catalogue
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue
  template:
    metadata:
      labels:
        name: catalogue
      {{- if .Values.istio.enabled }}
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      {{- end }}
    spec:
      # serviceAccountName: catalogue-api-iam-service-account
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z catalogue-db 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']  
      containers:
      - name: catalogue
        image: {{ if .Values.global.registry }}{{ .Values.global.registry }}/{{ end }}{{ .Values.catalogue.image.repo }}:{{ .Values.catalogue.image.tag }}
        command: ["/app"]
        args:
        - -port={{ .Values.catalogue.containerPort }}
        - -DSN=$(DB_USER):$(DB_PASSWORD)@tcp($(DB_HOST):3306)/$(DB_NAME)
        env:
          - name: DB_HOST
            value: "catalogue-db"
          - name: DB_NAME
            value: "socksdb"
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: catalogue-secret
                key: db_username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: catalogue-secret
                key: db_password
        {{- if .Values.zipkin.enabled }}
          - name: ZIPKIN
            value: http://{{ .Values.zipkin.url }}:9411/api/v1/spans
        {{- end }}
        resources:
{{ toYaml .Values.catalogue.resources | indent 10 }}
        ports:
        - containerPort: {{ .Values.catalogue.containerPort }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
{{- if lt (int .Values.carts.containerPort) 1024 }}
          capabilities:
            drop:
              - all
            add:
              - NET_BIND_SERVICE
{{- end }}
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.catalogue.containerPort }}
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.catalogue.containerPort }}
          initialDelaySeconds: 180
          periodSeconds: 3
